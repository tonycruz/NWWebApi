[
  {
    "id": 0,
    "accordionName": "accProductServerCode",
    "title": "Server Product View Model",
    "hrefName": "e24b7e28-6044-45bb-8c9a-89f0165f9a35",
    "href": "#e24b7e28-6044-45bb-8c9a-89f0165f9a35",
    "fileLocation": "Folder \\Models",
    "fileContent": "using System.Collections.Generic;\n\nnamespace NWWebApi.Models\n{\n    public class productsManagerVM\n    {\n        public List&lt;productVm&gt; products { get; set; }\n        public List&lt;categoryVm&gt; categories { get; set; }\n        public List&lt;supplierVm&gt; suppliers { get; set; }\n    }\n}\n\nnamespace NWWebApi.Models\n{\n    public class productVm\n    {\n        public int productID { get; set; }\n        public string productName { get; set; }\n        public int? supplierID { get; set; }\n        public int? categoryID { get; set; }\n        public string quantityPerUnit { get; set; }\n        public decimal? unitPrice { get; set; }\n        public short? unitsInStock { get; set; }\n        public short? unitsOnOrder { get; set; }\n        public short? reorderLevel { get; set; }\n        public bool discontinued { get; set; }\n    }\n}\nnamespace NWWebApi.Models\n{\n    public class categoryVm\n    {\n        public int categoryID { get; set; }\n        public string categoryName { get; set; }\n        public string description { get; set; }\n    }\n}\nnamespace NWWebApi.Models\n{\n    public class shipperVm\n    {\n        public int shipperID { get; set; }\n        public string companyName { get; set; }\n        public string phone { get; set; }\n    }\n}",
    "group": "language-csharp"
  },
  {
    "id": 1,
    "accordionName": "accProductServerCode",
    "title": "Product Controller",
    "hrefName": "8606e89b-4193-48df-99b7-aa312926628b",
    "href": "#8606e89b-4193-48df-99b7-aa312926628b",
    "fileLocation": "Folder \\Controllers\\ProductsApiController.cs",
    "fileContent": " using NWWebApi.Infrastructure;\nusing NWWebApi.Models;\nusing NWWebApi.Repository;\nusing System.Web.Http;\nusing System.Web.Http.Cors;\nusing System.Web.Http.Description;\n\nnamespace NWWebApi.Controllers\n{\n    [EnableCors(&quot;*&quot;, headers: &quot;*&quot;, methods: &quot;*&quot;)]\n    public class ProductsApiController : ApiController\n    {\n        private IProductsRepository&lt;productVm&gt; Repo;\n        public ProductsApiController()\n        {\n            Repo = new ProductsJsonRepository();\n        }\n        public ProductsApiController(IProductsRepository&lt;productVm&gt; _Repo)\n        {\n            Repo = _Repo;\n        }\n        #region &quot;Products&quot;\n        [ResponseType(typeof(productsManagerVM))]\n        public productsManagerVM GetProducts()\n        {\n            var products = Repo.GetProducts();\n            return products;\n        }\n        #endregion\n\n        #region &quot;Products Get By Id &quot;\n        [ResponseType(typeof(productVm))]\n        public IHttpActionResult GetProduct(int id)\n        {\n           var Vm = Repo.GetProduct(id);\n            if ((Vm == null))\n            {\n                return NotFound();\n            }\n            return Ok(Vm);\n        }\n        #endregion\n\n        #region &quot;Products Post&quot;\n        // POST api/ProductVm\n        [ResponseType(typeof(productVm))]\n        public IHttpActionResult PostProduct(productVm vm)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n\n            Repo.Add(vm);\n            Repo.Save();\n            return Ok(vm);\n        }\n        #endregion\n\n        #region &quot;Products Put&quot;\n        // PUT api/Products/5\n        [ResponseType(typeof(productVm))]\n        public IHttpActionResult PutProduct(productVm vm)\n        {\n            if (!ModelState.IsValid)\n            {\n                return BadRequest(ModelState);\n            }\n          \n          \n                Repo.Update(vm);\n                Repo.Save();\n           return Ok(vm);\n        }\n        #endregion\n\n        #region &quot;Products Put&quot;\n        //  DELETE api/Products/5\n        [ResponseType(typeof(productVm))]\n        public IHttpActionResult DeleteProduct(int id)\n        {\n            var vm = Repo.GetProduct(id);\n            if (vm == null)\n            {\n                return NotFound();\n            }\n            Repo.RemoveItem(vm);\n            Repo.Save();\n            return Ok(vm);\n        }\n        #endregion\n\n\n        protected override void Dispose(bool disposing)\n        {\n            base.Dispose(disposing);\n        }\n\n    }\n}\n",
    "group": "language-csharp"
  },
  {
    "id": 2,
    "accordionName": "accProductServerCode",
    "title": "IProduct Repository",
    "hrefName": "09608d3c-a6cb-42ec-950f-f2da4af5f51b",
    "href": "#09608d3c-a6cb-42ec-950f-f2da4af5f51b",
    "fileLocation": "Folder \\Infrastructure\\IProductsRepository.cs",
    "fileContent": "using NWWebApi.Models;\n\nnamespace NWWebApi.Infrastructure\n{\n    public interface IProductsRepository&lt;Items&gt; : IRepositoryBase&lt;productVm&gt;\n    {\n\n        productsManagerVM GetProducts();\n        productVm GetProduct(int id);\n\n    }\n}\n\nnamespace NWWebApi.Infrastructure\n{\n    public interface IRepositoryBase&lt;T&gt; where T : class\n    {\n        void Add(T Item);\n\n        void Update(T Item);\n\n        void RemoveItem(T Item);\n\n        void Save();\n    }\n}",
    "group": "Server"
  },
  {
    "id": 3,
    "accordionName": "accProductServerCode",
    "title": "Product Repository",
    "hrefName": "800d6563-ed74-4b0c-9b0d-02f05e49a3a0",
    "href": "#800d6563-ed74-4b0c-9b0d-02f05e49a3a0",
    "fileLocation": "Folder \\Repository",
    "fileContent": "using System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Hosting;\nusing Newtonsoft.Json;\nusing NWWebApi.Infrastructure;\nusing NWWebApi.Models;\n\nnamespace NWWebApi.Repository\n{\n    public class ProductsJsonRepository : IProductsRepository&lt;productVm&gt;\n    {\n        private productsManagerVM db;\n        public ProductsJsonRepository()\n        {\n            db = Retrieve();\n        }\n        public productsManagerVM GetProducts()\n        {\n            return db;\n        }\n        public productVm GetProduct(int id)\n        {\n            productVm result = db.products.Where(p =&gt; p.productID == id).SingleOrDefault();\n            return result;\n        }\n        public void Add(productVm Item)\n        {\n            var newID = db.products.Max(p =&gt; p.productID) + 1;\n            Item.productID = newID;\n            db.products.Add(Item);         \n        }\n        public void RemoveItem(productVm Item)\n        {\n            productVm result = db.products.Where(_Pro =&gt; _Pro.productID == Item.productID).SingleOrDefault();\n            db.products.Remove(result);\n        }\n        public void Save()\n        {\n            WriteData(db.products);\n        }\n        public void Update(productVm Item)\n        {\n            productVm result = db.products.Where(_Pro =&gt; _Pro.productID == Item.productID).SingleOrDefault();\n            result.productName = Item.productName;\n            result.supplierID = Item.supplierID;\n            result.categoryID = Item.categoryID;\n            result.quantityPerUnit = Item.quantityPerUnit;\n            result.unitPrice = Item.unitPrice;\n            result.unitsInStock = Item.unitsInStock;\n            result.unitsOnOrder = Item.unitsOnOrder;\n            result.reorderLevel = Item.reorderLevel;\n            result.discontinued = Item.discontinued;\n        }\n        private bool WriteData(List&lt;productVm&gt; products)\n        {\n            // Write out the Json\n            var filePath = HostingEnvironment.MapPath(&quot;~/App_Data/products.json&quot;);\n\n            var json = JsonConvert.SerializeObject(products,Formatting.Indented);\n            System.IO.File.WriteAllText(filePath, json);\n\n            return true;\n        }\n        internal productsManagerVM Retrieve()\n        {\n            var filePathProducts = HostingEnvironment.MapPath(&quot;~/App_Data/products.json&quot;);\n            var filePathCategories = HostingEnvironment.MapPath(&quot;~/App_Data/categories.json&quot;);\n            var filePathSuppliers = HostingEnvironment.MapPath(&quot;~/App_Data/suppliers.json&quot;);\n\n            var jsonProducts = System.IO.File.ReadAllText(filePathProducts);\n            var jsonCategories = System.IO.File.ReadAllText(filePathCategories);\n            var jsonSuppliers = System.IO.File.ReadAllText(filePathSuppliers);\n\n\n            var products = JsonConvert.DeserializeObject&lt;List&lt;productVm&gt;&gt;(jsonProducts);\n            var categories = JsonConvert.DeserializeObject&lt;List&lt;categoryVm&gt;&gt;(jsonCategories);\n            var suppliers = JsonConvert.DeserializeObject&lt;List&lt;supplierVm&gt;&gt;(jsonSuppliers);\n\n            productsManagerVM results = new productsManagerVM();\n            results.categories = categories;\n            results.products = products;\n            results.suppliers = suppliers;\n            return results;\n        }\n    }\n}",
    "group": "language-csharp"
  }
]